using UnityEngine;
using UnityEngine.UIElements;

namespace ModularConsole
{
    public class ConsoleUI : MonoBehaviour
    {
        private const float CONSOLE_HEIGHT_PERCENTAGE_OF_SCREEN = 0.5f;

        public bool IsVisible => gameObject.activeSelf;
        
        private UIDocument _document;
        private StyleSheet _styles;
        private VisualTreeAsset _defaultRoot;
        private bool _initialized;
        
        internal void Initialize(VisualTreeAsset defaultRoot, StyleSheet styleSheet, ThemeStyleSheet themeStyleSheet)
        {
            if (ConsoleSystem.UI != null)
            {
                Debug.LogError($"Found second instance of {nameof(ConsoleUI)} by path: {ConsoleSystem.UI.gameObject.scene}/{ConsoleSystem.UI.gameObject.name}!\nIt will be destroyed");
                Destroy(ConsoleSystem.UI.gameObject);
            }
            
            _styles = styleSheet;
            _defaultRoot = defaultRoot;
            _document = gameObject.AddComponent<UIDocument>();

            var settings = ScriptableObject.CreateInstance<PanelSettings>();
            settings.sortingOrder = 9999;
            settings.name = "AutoGenerated";
            settings.themeStyleSheet = themeStyleSheet;
            _document.panelSettings = settings;
            
            Hide();

            _initialized = true;
        }

        private void OnDestroy()
        {
            if (ConsoleSystem.UI == this)
                ConsoleSystem.UI = null;
        }

        private void Update()
        {
            foreach (var consoleModule in ConsoleSystem.Modules)
            {
                if (consoleModule.NeedsUpdate)
                    consoleModule.Update();
            }
        }

        public void Show()
        {
            gameObject.SetActive(true);
        }

        public void Hide()
        {
            gameObject.SetActive(false);
        }

        private void OnEnable()
        {
            if (_initialized == false)
                return;

            _defaultRoot.CloneTree(_document.rootVisualElement);
            _document.rootVisualElement.styleSheets.Add(_styles);

            var tabView = _document.rootVisualElement.Q<TabView>("content-holder");
            
            foreach (var consoleModule in ConsoleSystem.Modules)
            {
                VisualElement moduleRoot = new VisualElement()
                {
                    name = $"{consoleModule.GetType().Name}__ui-container"
                };
                moduleRoot.AddToClassList("module-ui-container");
                consoleModule.ConstructUI(moduleRoot);
                
                Tab tab = new Tab
                {
                    label = consoleModule.ModuleName
                };
                tab.contentContainer.Add(moduleRoot);
                tabView.contentContainer.Add(tab);
            }
        }
    }
}