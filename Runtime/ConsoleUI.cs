using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;
using Cursor = UnityEngine.Cursor;

namespace ModularConsole
{
    public class ConsoleUI : MonoBehaviour
    {
        private const float CONSOLE_HEIGHT_PERCENTAGE_OF_SCREEN = 0.5f;

        public bool IsVisible => gameObject.activeSelf;

        internal readonly List<StyleSheet> AdditionalStyles = new();
        
        private UIDocument _document;
        private StyleSheet _styles;
        private VisualTreeAsset _defaultRoot;
        private bool _initialized;
        private CursorLockMode _lastCursorLockState;
        
        internal void Initialize(VisualTreeAsset defaultRoot, StyleSheet styleSheet, ThemeStyleSheet themeStyleSheet, PanelSettings panelSettings = null)
        {
            if (ConsoleSystem.UI != null)
            {
                Debug.LogError($"Found second instance of {nameof(ConsoleUI)} by path: {ConsoleSystem.UI.gameObject.scene}/{ConsoleSystem.UI.gameObject.name}!\nIt will be destroyed");
                Destroy(ConsoleSystem.UI.gameObject);
            }
            
            _styles = styleSheet;
            _defaultRoot = defaultRoot;
            _document = gameObject.AddComponent<UIDocument>();

            if (panelSettings == null)
            {
                var settings = ScriptableObject.CreateInstance<PanelSettings>();
                settings.sortingOrder = 9999;
                settings.name = "AutoGenerated";
                settings.themeStyleSheet = themeStyleSheet;
                _document.panelSettings = settings;
            }
            else
            {
                _document.panelSettings = panelSettings;
            }
            
            Hide();

            _initialized = true;
        }

        private void OnDestroy()
        {
            if (ConsoleSystem.UI == this)
                ConsoleSystem.UI = null;
        }

        private void Update()
        {
            foreach (var consoleModule in ConsoleSystem.Modules)
            {
                if (consoleModule.NeedsUpdate)
                    consoleModule.Update();
            }
        }

        public void Show()
        {
            if (IsVisible)
                return;

            _lastCursorLockState = Cursor.lockState;
            Cursor.lockState = CursorLockMode.None;
            gameObject.SetActive(true);
        }

        public void Hide()
        {
            if (IsVisible == false)
                return;

            Cursor.lockState = _lastCursorLockState;
            gameObject.SetActive(false);
        }

        private void OnEnable()
        {
            if (_initialized == false)
                return;

            _defaultRoot.CloneTree(_document.rootVisualElement);
            _document.rootVisualElement.styleSheets.Add(_styles);
            foreach (var additionalStyle in AdditionalStyles)
            {
                _document.rootVisualElement.styleSheets.Add(additionalStyle);
            }

            var tabView = _document.rootVisualElement.Q<TabView>("content-holder");
            
            foreach (var consoleModule in ConsoleSystem.Modules)
            {
                VisualElement moduleRoot = new VisualElement()
                {
                    name = $"{consoleModule.GetType().Name}__ui-container"
                };
                moduleRoot.AddToClassList("module-ui-container");
                consoleModule.ConstructUI(moduleRoot);
                
                Tab tab = new Tab
                {
                    label = consoleModule.ModuleName
                };
                tab.contentContainer.Add(moduleRoot);
                tabView.contentContainer.Add(tab);
            }

            var closeRegion = _document.rootVisualElement.Q("close-region");
            closeRegion.RegisterCallback<ClickEvent>(OnCloseRegionClick);
        }

        private void OnCloseRegionClick(ClickEvent evt)
        {
            Hide();
        }
    }
}